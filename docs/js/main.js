let scrollElems=document.getElementsByClassName("scrollPage"),article=document.querySelector(".article"),durationTime=[400,600,800],indexOfSlowest=durationTime.indexOf(Math.max(...durationTime)),durationSetAdditional=[250,250,250],durationTimeBG=[];for(let i=0;i<durationTime.length;i++)durationTimeBG[i]=durationTime[i]+2*durationSetAdditional[i];let currentProgress,finalDestinationBottom,finalDestinationTop,durationZero=[0,0,0],pow=2,gradDBA={color:[[231,78,44],[254,156,100]]},gradMustang={color:[[85,75,161],[105,199,237]]},grad={},compareGrad={},currentGrad={color:[[],[]]},slidePhones=document.getElementsByClassName("col-slide"),initTop=[],finalTop=[],phoneHeight=.6*window.innerHeight,cecilElems=[document.getElementsByClassName("colLeftCecil"),document.getElementsByClassName("colCenterCecil"),document.getElementsByClassName("colRightCecil")],dbaElems=[document.getElementsByClassName("colLeftDBA"),document.getElementsByClassName("colCenterDBA"),document.getElementsByClassName("colRightDBA")],distance=window.innerHeight,currentTopCecil=[],newTopCecil=[],currentTopDBA=[],newTopDBA=[],stopMove=!1;function animate({timing,draw,duration}){let start=performance.now();requestAnimationFrame(function animate(time){let timeFraction=(time-start)/duration;timeFraction>1&&(timeFraction=1);let progress=timing(timeFraction);draw(progress),timeFraction<1&&!stopMove&&requestAnimationFrame(animate)})}function change(paramGrad1,paramGrad2,element,timeDurationSet){(grad={...paramGrad1}).color=[...paramGrad1.color],compareGrad.color=[...paramGrad2.color],compareGrad={...paramGrad2};for(let j=0;j<grad.color.length;j++)grad.color[j]=[...paramGrad1.color[j]],compareGrad.color[j]=[...paramGrad2.color[j]];bgColor(element,timeDurationSet)}function bgColor(elem,setDuration){return animate({duration:Math.max(...setDuration),timing:function(timeFraction){return timeFraction},draw:function(progress){for(let i=0;i<2;i++)for(let j=0;j<3;j++)currentGrad.color[i][j]=grad.color[i][j]+(compareGrad.color[i][j]-grad.color[i][j])*progress;elem.style.backgroundImage="linear-gradient(117deg, rgb("+currentGrad.color[0]+"), rgb("+currentGrad.color[1]+"))"}})}function currentPos(){for(let i=0;i<scrollElems.length;i++)if(window.scrollY+window.innerHeight/2>=scrollElems[i].offsetTop&&window.scrollY+window.innerHeight/2<scrollElems[i].offsetTop+scrollElems[i].clientHeight)return i}function dbaSection(){for(let i=0;i<scrollElems.length;i++)if("dbafitness"==scrollElems[i].id)return i}function mustangSection(){for(let i=0;i<scrollElems.length;i++)if("mustangchain"==scrollElems[i].id)return i}function mobileMove(durationSet){return new Promise((res,rej)=>{for(let index=0;index<slidePhones.length;index++)animate({duration:durationSet[index],timing:function(timeFraction){return Math.pow(timeFraction,pow)},draw:function(progress){slidePhones[index].style.transform="translateY("+(progress*finalTopArray[index]+(1-progress)*startTopArray[index])+"px)",currentProgress[index]=progress*finalTopArray[index]+(1-progress)*startTopArray[index],1==progress&&index==indexOfSlowest&&(console.log("resolved"),res())}})})}function topMove(durationSet){return new Promise((res,rej)=>{for(let index=0;index<slidePhones.length;index++)newTopCecil[index]||(newTopCecil[index]=0),currentTopCecil[index]=newTopCecil[index],finalDestinationTop=finalDestinationTop==-1*distance?-1*distance:0,animate({duration:durationSet[index],timing:function(timeFraction){return Math.pow(timeFraction,pow)},draw:function(progress){for(let i=0;i<cecilElems[index].length;i++)cecilElems[index][i].style.transform="translateY("+((1-progress)*currentTopCecil[index]+progress*finalDestinationTop)+"px)";newTopCecil[index]=(1-progress)*currentTopCecil[index]+progress*finalDestinationTop,1==progress&&index==indexOfSlowest&&res()}})})}function bottomMove(durationSet){return new Promise((res,rej)=>{for(let index=0;index<slidePhones.length;index++)newTopDBA[index]||(newTopDBA[index]=0),currentTopDBA[index]=newTopDBA[index],finalDestinationBottom=finalDestinationBottom==distance?distance:0,animate({duration:durationSet[index],timing:function(timeFraction){return Math.pow(timeFraction,pow)},draw:function(progress){for(let i=0;i<dbaElems[index].length;i++)dbaElems[index][i].style.transform="translateY("+((1-progress)*currentTopDBA[index]+progress*finalDestinationBottom)+"px)";newTopDBA[index]=(1-progress)*currentTopDBA[index]+progress*finalDestinationBottom,1==progress&&index==indexOfSlowest&&res()}})})}window.addEventListener("load",function(){let shiftTop=[0,.22*window.innerHeight,.02*window.innerHeight],shiftBottom=[.4*window.innerHeight,.22*window.innerHeight,2*phoneHeight];for(let i=0;i<slidePhones.length;i++)initTop[i]=slidePhones[i].offsetTop+shiftTop[i];for(let i=0;i<slidePhones.length;i++)finalTop[i]=initTop[i]+5.3*phoneHeight-shiftTop[i]-shiftBottom[i];currentPos()>dbaSection()?(firstEnterMustang=!1,firstEnterDBA=!0,newTopDBA=[0,0,0],finalDestinationBottom=distance,newTopCecil=[-1*distance,-1*distance,-1*distance],finalDestinationTop=0,currentProgress=[...initTop],finalTopArray=[...finalTop],startTopArray=[...currentProgress],change(gradDBA,gradMustang,article,durationZero),topMove(durationZero).then(()=>mobileMove(durationZero)).then(()=>bottomMove(durationZero))):(firstEnterDBA=!1,firstEnterMustang=!0,newTopDBA=[distance,distance,distance],finalDestinationBottom=0,newTopCecil=[0,0,0],finalDestinationTop=-1*distance,currentProgress=[...finalTop],finalTopArray=[...initTop],startTopArray=[...currentProgress],change(gradMustang,gradDBA,article,durationZero),bottomMove(durationZero).then(()=>mobileMove(durationZero)).then(()=>topMove(durationZero))),document.addEventListener("scroll",function(event){if(currentPos()==dbaSection()&&1==firstEnterDBA){new Promise((res,rej)=>{stopMove=!0,setTimeout(()=>{res()},0)}).then(()=>{stopMove=!1,finalDestinationBottom=0,finalDestinationTop=-1*distance,finalTopArray=[...initTop],startTopArray=[...currentProgress],change(currentGrad,gradDBA,article,durationTimeBG),bottomMove(durationSetAdditional).then(()=>mobileMove(durationTime)).then(()=>topMove(durationSetAdditional))}),firstEnterDBA=!1,firstEnterMustang=!0}else if(currentPos()==mustangSection()&&1==firstEnterMustang){new Promise((res,rej)=>{stopMove=!0,setTimeout(()=>{res()},0)}).then(()=>{stopMove=!1,finalDestinationTop=0,startTopArray=[...currentProgress],finalTopArray=[...finalTop],finalDestinationBottom=distance,change(currentGrad,gradMustang,article,durationTimeBG),topMove(durationSetAdditional).then(()=>mobileMove(durationTime)).then(()=>bottomMove(durationSetAdditional))}),firstEnterMustang=!1,firstEnterDBA=!0}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
